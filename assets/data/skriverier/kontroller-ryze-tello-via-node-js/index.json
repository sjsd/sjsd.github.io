{"hash":"190e3481eede75abcd92e712c16ac94f9cd52e73","data":{"blogPosts":{"id":"43","title":"Kontroller Ryze Tello via Node.js","subtitle":"Fly drone via terminalen","abstract":"I 2017 slo DJI seg sammen med Intel og Ryze Technology og skapte den lille dronen Ryze Tello. Dette er en relativt rimelig drone. Denne lille dronen har mye muskler under panseret som blant annet en SDK som er tilgjengelig via Wi-Fi. I dette innlegget skal jeg presentere en av mange muligheter til å kontrollere dronen ved å bruke Node.js og noen innebygde biblioteket for å sende kommandoer til å styre dronen direkte fra terminalvinduet.\n\n","bodytext":"<p>Jeg vil nok anbefale at du har litt kunnskap om bruke av terminal og JavaScript før du setter i gang. Sett bort ifra det mest åpenbare (en datamaskin og dronen) så trenger du <a href=\"https://www.npmjs.com/get-npm\">Node og NPM installert</a> på din datamaskin. Jeg bruker også to bibliotek som følger med Node.js som heter <em>dgram</em> og <em>readline</em>. I tillegg kan det være greit å kjenne til kommandoene man kan sende til dronen. De er listet opp i <a href=\"https://dl-cdn.ryzerobotics.com/downloads/tello/0228/Tello+SDK+Readme.pdf\">Tello sin SDK (PDF-fil)</a>.</p>\n<h2>Import</h2>\n<p>Vi trenger to av Node.js sine innebygde bibliotek. Dette gjør koden vår i stand til å sende kommandoene via UDP.</p>\n<pre><code>const dgram = require('dgram');\nconst readline = require('readline');\n</code></pre>\n<h2>Tilkobling</h2>\n<p>Dronen har sitt eget Wi-Fi -nettverk. Før vi kjører koden så må datamaskinen være tilkoblet dette nettverket. Som nevnt i Tello sin SDK så har den følgende IP-adresse og port som vi kobler oss til.</p>\n<pre><code>const HOST = '192.168.10.1';\nconst PORT = 8889;\nconst client = dgram.createSocket('udp4');\nclient.bind(PORT);\n</code></pre>\n<h2>Send en kommando</h2>\n<p>Vi lager oss en funksjon som lar oss sende en kommando til dronen. Funksjonen kobler seg til IP-adressen og porten. Komandoene er strenger, derfor kan vi skrive funksjonen slik:</p>\n<pre><code>function sendCommand(command) {\n    client.send(command, 0, command.length, PORT, HOST, (err, bytes) =&gt; {\n        if (err) throw err;\n        console.log(`En kommando er sendt til ${HOST}:${PORT}`);\n    });\n}\n</code></pre>\n<h2>Få svar</h2>\n<p>Når vi sender en kommando til dronen så kan den svare tilbake. F.eks. hvis man sender <em>battery?</em> så kan dronen svare med hvor mye strøm det er igjen på batteriet. Denne koden lytter etter meldinger fra dronen og skriver det ut i terminalen.</p>\n<pre><code>client.on('message', (message) =&gt; {\n    console.log(message);\n});\n</code></pre>\n<h2>Kommando</h2>\n<p>Nå stå vi ved et veiskille. Enten kan du hardkode og sende kommandoer til dronen eller du kan lytte etter det som skrives inn i terminalvinduet for å sende det som en kommando.</p>\n<p>F.eks. kan vi spørre om batteriet ved å legge til:</p>\n<pre><code>sendCommand('battery?');\n</code></pre>\n<p>Førstnevnte er kanskje en idé om man skal fly dronen helt likt hver gang. Men sistnevnte er langt mer praktisk og lar en sende kommandoer til dronen. Så vi fjerner den forrige linjen og erstatter den med følgende kode som lar oss lytte etter kommandoer skrevet inn i terminalen.</p>\n<pre><code>const rline = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\n(function input() {\n    rline.question('Skriv inn kommando:  ', (command) =&gt; {\n      if (command === 'exit') {\n        rline.close();\n      } else {\n        sendCommand(command);\n        input();\n      }\n    });\n  }());\n</code></pre>\n<h2>Hele koden</h2>\n<p>Nå har jeg gått igjennom blokk for blokk i koden. Her er den endelige koden i sin helhet.</p>\n<pre><code>const dgram = require('dgram');\nconst readline = require('readline');\n\nconst PORT = 8889;\nconst HOST = '192.168.10.1';\n\nconst client = dgram.createSocket('udp4');\nclient.bind(PORT);\n\nconst rline = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\n\nfunction sendCommand(command) {\n  client.send(command, 0, command.length, PORT, HOST, (err, bytes) =&gt; {\n    if (err) throw err;\n    console.log(`En kommando er sendt til ${HOST}:${PORT}`);\n  });\n}\n\nclient.on('message', (message) =&gt; {\n  console.log(message);\n});\n\n\n(function userInput() {\n  rline.question('Skriv inn kommando:  ', (command) =&gt; {\n    if (command === 'exit') {\n      rl.close();\n    } else {\n      sendCommand(command);\n      userInput();\n    }\n  });\n}());\n</code></pre>\n<p>Som du ser så krever det ikke mangel linjer kode for å koble seg til dronen. Det er kanskje ikke så veldig praktisk å skrive inn komandoer på denne måten når man normalt sett kan bruke mobiltelefonen til å kontrollere den. Men det er en proof of consept som viser hva som er mulig å få til. Enten man bruker Node.js slik som jeg har gjort her eller andre språk.</p>\n","image":"https://res.cloudinary.com/sjsd/image/upload/c_scale,q_60,w_896/ozo7uhxqigqpwoatv1wt","youtube":"","externalUrl":"","created_at":1600196551640,"updated_at":1600250179671,"path":"/skriverier/kontroller-ryze-tello-via-node-js/","date":"2020-09-17 17:02:31","source":"","sourceAsCanonical":null}},"context":{}}