{"hash":"190e3481eede75abcd92e712c16ac94f9cd52e73","data":{"blogPosts":{"id":"44","title":"Papegøye","subtitle":"Får nettleseren til å svare deg med litt javascript","abstract":"Med noen enkle linjer med JavaScript skal vi få nettleseren til å gjenta det vi sier, til og med få vite hvor mye klokka er.","bodytext":"<p>Hvis du er som meg så er du kanskje litt nysgjerrig på hva som er mulig å få til uten at man nødvendigvis har brukt for det.  Det bærer arbeidsbenken på hobbyrommet mitt preg av. Utallige proof of concepts har blitt teste ut og aldri blitt noe mer av.</p>\n<p>For noen dager siden snublet jeg tilfeldigvis over <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\">SpeechRecognition</a> i JavaScript. Så nå har jeg forlatt hobbyrommet og benket meg ned foran datamaskinen for å lage en aldri så liten papegøye som hermer etter det som blir sagt.</p>\n<p>Nå skal jeg være helt ærlig å si at jeg aldri har hatt behov for å lage en nettside som man kan snakke til. Men hvem vet, kanskje jeg kan få det i fremtiden. Men det er jo også utrolig gøy å kunne lage ulike svar man kan få tilbake når man stiller et spørsmål. Kanskje jeg sitter nå å lager Sara, den ukjente søsteren til Siri? Tvilsomt.</p>\n<p>Siden vi skal skrive relativt enkelt JavaScript så passer dette innlegget godt for nybegynnere i JavaScript. Så jeg skal prøve å ta dette stegvis og forkortet. Hele koden kan lastes ned fra GitHub <a href=\"https://github.com/sjsd/parrot\">https://github.com/sjsd/parrot</a></p>\n<p>Den ferdige koden vil ta opp lyd etter at man har trykket på knappen. Når man slutter å snakke så vil den automatisk detektere dette og vise det man har sagt som tekst på skjermen.</p>\n<h2>Steg 1 - index.html</h2>\n<p>Først trenger vi en HTML-fil som skal inneholde en knapp og et element som skal vise tekst. Jeg dykker ikke mer i dybden enn som så.</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;no&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Papegøye&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;button class=&quot;talk&quot;&gt;Snakk til meg&lt;/button&gt;\n\t&lt;div class=&quot;content&quot;&gt;&lt;/div&gt;\n\t&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Legg merke til at vi har en <em>script-tag</em> som henter inn en JavaScript-fil som heter <em>app.js</em>.</p>\n<h2>Steg 2 - app.js</h2>\n<p>Ikke overraskende så trenger vi også en JavaScript-fil som heter <em>app.js</em>. Denne kan enn så lenge være tom. Resten av koden vil foregå i denne filen.</p>\n<h2>Steg 3 - tildele noen elementer</h2>\n<p>Vi tildeler de to DOM-elementene til hver sin variabel. Dette gjør det enklere for oss senere å gjøre noe med dem.</p>\n<pre><code>const btn = document.querySelector('.talk');\nconst content = document.querySelector('.content');\n</code></pre>\n<p>Vi trenger også å tilegne oss to variabler for SpeechRecognition.</p>\n<pre><code>const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n</code></pre>\n<p>Det er kanskje nå jeg burde nevne at <a href=\"https://caniuse.com/?search=SpeechRecognition\">ikke alle nettlesere støtter SpeechRecognition</a>. I skrivende stund er det Chrome som har best støtte.</p>\n<h3>Steg 4 - undøvendig</h3>\n<p>Dette steget er egentlig undøvendig pr. nå, men det er kjekt å se når SpeechRecognition er aktivt. Derfor har vi det med. Så vi lager to nye funksjoner.</p>\n<p>Denne skriver ut en melding i konsollet når SpeechRecognition er aktivert. Tar du forøvrig referansen?</p>\n<pre><code>recognition.onstart = () =&gt; {\n    console.log('Voice is activated, As I rock, rock, rock, rock, rock the microphone');\n};\n</code></pre>\n<p>Denne skriver ut en melding i konsollet når SpeechRecognition er ferdig.</p>\n<pre><code>recognition.onspeechend = () =&gt; {\n    console.log('Carry on with the freestyler');\n};\n</code></pre>\n<p>Inne i disse to funksjonene kan man også legge til kode for å gjøre visuelle endringer i nettleseren. F.eks. en indikasjon på at nå kan man snakker. Så de er ikke helt undøvendige, men i dette eksempelet bruker jeg de ikke til noe spesielt.</p>\n<h3>Steg 5 - trykk på knapp</h3>\n<p>Når man trykker på knappen så ønsker man å starte opptaket av stemmen. Denne avsluttes automatisk etter en kort stund med stillhet.</p>\n<pre><code>btn.addEventListener('click', () =&gt; {\n    recognition.start();\n});\n</code></pre>\n<h3>Steg 6 - vis resultatet</h3>\n<p>Når opptaket er ferdig så får man tilgjengelig en event og et av feltene er i ren tekst. Denne teksten skal vi vise på skjermen.</p>\n<pre><code>recognition.onresult = (event) =&gt; {\n    const current = event.resultIndex;\n    const transcript = event.results[current][0].transcript;\n    content.textContent = transcript;\n}\n</code></pre>\n<p>Nå er vi i grunn ferdig. Men vi har jo lyst til å leke litt med enda et API i nettleseren som gjør at den snakker til oss også. Så vi lager enda en funksjon.</p>\n<h3>Steg 7 - papegøyen</h3>\n<p>Her bruker vi <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance\">SpeechSynthesisUtterance</a> Denne kan svare oss på ulike språk (ikke oversette). Legg merke til at vi i HTML-fila på <em>HTML-tagen</em> har en attributt <code>lang=&quot;no&quot;</code>. <em>no</em> for norsk. Det gjør at vi kan gi SpeechSynthesisUtterance norsk tekst og skal svare med norsk stemme.</p>\n<pre><code>parrot = (message) =&gt; {\n    const speech = new SpeechSynthesisUtterance();\n    speech.volume = 1;\n    speech.rate = 0.9;\n    speech.pitch = 1;\n    speech.text = message;\n   \twindow.speechSynthesis.speak(speech);\n}\n</code></pre>\n<p>Vi må tilbake til steg 6 og legge til <code>parrot(transcript);</code> slik:</p>\n<pre><code>recognition.onresult = (event) =&gt; {\n    const current = event.resultIndex;\n    const transcript = event.results[current][0].transcript;\n    content.textContent = transcript;\n\tparrot(transcript);\n}\n</code></pre>\n<hr>\n<p>Nå er det bare å skru opp lyden og snakke i vei!</p>\n<h3>Steg 8 - vent nå litt ...</h3>\n<p>Vent nå litt, nevnte vi ikke at den skulle svare med klokkeslett? Joda, vi gjør følgende endringer i funksjonen for papegøyen vår.</p>\n<p>Vi legger til en if for å sjekke om teksten som papegøyen ( <code>parrot()</code> ) får inneholder ordet <em>klokka</em>.</p>\n<pre><code>    if (message.includes('klokka')) {\n        var time = new Date();\n        var h = time.getHours();\n        var m = time.getMinutes();\n        speech.text = 'Klokka er ' + h + ':' + m;\n        content.textContent = speech.text;\n    }\n</code></pre>\n<p>Da blir hele <code>parrot()</code> -funksjonen slik:</p>\n<pre><code>parrot = (message) =&gt; {\n    const speech = new SpeechSynthesisUtterance();\n    speech.volume = 1;\n    speech.rate = 0.9;\n    speech.pitch = 1;\n    speech.text = message;\n\n    if (message.includes('klokka')) {\n        var time = new Date();\n        var h = time.getHours();\n        var m = time.getMinutes();\n        speech.text = 'Klokka er ' + h + ':' + m;\n        content.textContent = speech.text;\n    }\n\n    window.speechSynthesis.speak(speech);\n }\n\n</code></pre>\n<hr>\n<p>Hele mitt eksemple og hele min kode har jeg lagt ut på GitHub <a href=\"https://github.com/sjsd/parrot\">https://github.com/sjsd/parrot</a></p>\n<hr>\n<p>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\">Freepik</a> from <a href=\"www.flaticon.com\">www.flaticon.com</a>.</p>\n","image":"https://res.cloudinary.com/sjsd/image/upload/c_scale,q_60,w_896/njs5lvm67aolth8pvulf","youtube":"","externalUrl":"","created_at":1605527462083,"updated_at":1605532751732,"path":"/skriverier/papegoye/","date":"2020-11-16 11:51:02","source":"","sourceAsCanonical":null}},"context":{}}